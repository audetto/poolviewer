{"name":"Poolviewer","tagline":"Opensource data viewer for Swimovate Poolmate swimming watches.","body":"# PoolViewer #\r\nCross platform driver, downloader and viewer for [Swimovate](http://www.swimovate.com/) [PoolMatePro](http://www.swimovate.com/poolmatepro.html) swim watches for Linux and Windows.\r\n\r\nCross platform application for downloading data from Swimovate PoolMate watches.\r\n\r\nUses [Qt](http://qt.nokia.com/products/) and [libusb](http://www.libusb.org/wiki/libusb-1.0).\r\n\r\n# Documentation #\r\nOverview of the user interface [Overview.pdf](http://poolviewer.googlecode.com/files/Overview.pdf)\r\n\r\n# Screenshots #\r\n![](https://lh4.googleusercontent.com/-TPhRLqYgm7o/TvnXQ8-j2kI/AAAAAAAABv4/ZnML1VezwGQ/s400/linux-tech2.png)\r\n![](https://lh4.googleusercontent.com/-b03COsx-lGU/TvnXSDXeKpI/AAAAAAAABwI/0UzG3jc20aA/s400/linux-vol2.png)\r\n\r\nThe poolmate dongle is actually a TI3410 USB-serial interface.\r\nThere is already a kernel driver for the TI3410 - ti_usb_3410_5052 which could\r\nprobably be used instead. However trying to get it working just resulted in\r\nfailure to download firmware errors, despite pointing it at the right firmware\r\nfrom the windows driver. Also the linux driver doesn't seem to detect when\r\nthere are two configurations (i.e. the firmware is already loaded) and just\r\nselect the second without attempting to download.\r\n\r\nTherefore.... for now will stick to the simplistic included userspace USB\r\ndriver instead although now changed to just dump down the raw data so might\r\nadd an option to download from a ttyUSB device instead just incase I get the\r\nserial driver working.\r\n\r\nThe data protocol is pretty straightforward, the watch just serially dumps a\r\nbinary representation of its contents when it's placed onto the dock.\r\n\r\n03/2015 Finally merged in changes for Pod A support from Valentio Colosso - \r\n\r\nIt adds the support to the virtual ttyUSB serial port for the swimovate Poolmate Pro.\r\n This file make use of the QtSerialPort module of the Qt Toolkit.\r\n\r\n Tested with Poolmate dongle Pod version A.\r\n  This is a FTDI USB-serial device, wich is managed from ftdi_sio module.\r\n  In my ubuntu 13.10, the module isn't detected, so I had load the module manually using\r\n\r\n sudo modprobe -q ftdi_sio product=0x8b30 vendor=0x0403\r\n\r\n If the pod is detected, module is loaded and you will notice a nice, newly created /dev/ttyUSB0 device.\r\n\r\n After a while, I ended up creating a new file\r\n\r\n /etc/udev/rules.d/99-poolmate.rules\r\n\r\n containing the following lines\r\n\r\n $ /etc/udev/rules.d/100-dvb.rules\r\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0403\", ATTRS{idProduct}==\"8b30\", PROGRAM=\"/sbin/modprobe -q ftdi_sio product=0x8b30 vendor=0x0403\"\r\n\r\n This will do the magic automatically loading the module on pod connection and creating /devttyUSB0.\r\n\r\n--\r\n\r\nNote the mechanism for adding undetected driver ids for ftdi_sio has changed\r\nyou will need to perform the following:\r\n\r\n $ modprobe ftdi_sio\r\n $ echo 0403 8b30 > /sys/bus/usb-serial/drivers/ftdi_sio/new_id\r\n\r\nSome binary packages available on openSUSE build service:\r\n\r\nopenSUSE 13.2 - \r\nhttps://build.opensuse.org/package/binaries/home:ivorhewitt:poolsync/poolsync?repository=openSUSE_13.2\r\n\r\nFedora 21 - \r\nhttps://build.opensuse.org/package/binaries/home:ivorhewitt:poolsync/poolsync?repository=Fedora_21\r\n\r\nUbuntu 14.10 - \r\nhttps://build.opensuse.org/package/binaries/home:ivorhewitt:poolsync/poolsync?repository=xUbuntu_14.10","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}